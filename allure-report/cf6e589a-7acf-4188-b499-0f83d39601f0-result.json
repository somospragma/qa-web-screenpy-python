{"name": "test_enter_case_studios_view", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 122\nCurrent browser version is 124.0.6367.208 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nStacktrace:\n\tGetHandleVerifier [0x00007FF6BEF5AD02+56930]\n\t(No symbol) [0x00007FF6BEECF602]\n\t(No symbol) [0x00007FF6BED842E5]\n\t(No symbol) [0x00007FF6BEDBA432]\n\t(No symbol) [0x00007FF6BEDB983F]\n\t(No symbol) [0x00007FF6BEDB341E]\n\t(No symbol) [0x00007FF6BEDB05D4]\n\t(No symbol) [0x00007FF6BEDF595F]\n\t(No symbol) [0x00007FF6BEDF54C0]\n\t(No symbol) [0x00007FF6BEDEBA43]\n\t(No symbol) [0x00007FF6BEDBD438]\n\t(No symbol) [0x00007FF6BEDBE4D1]\n\tGetHandleVerifier [0x00007FF6BF2D6F8D+3711213]\n\tGetHandleVerifier [0x00007FF6BF3304CD+4077101]\n\tGetHandleVerifier [0x00007FF6BF32865F+4044735]\n\tGetHandleVerifier [0x00007FF6BEFF9736+706710]\n\t(No symbol) [0x00007FF6BEEDB8DF]\n\t(No symbol) [0x00007FF6BEED6AC4]\n\t(No symbol) [0x00007FF6BEED6C1C]\n\t(No symbol) [0x00007FF6BEEC68D4]\n\tBaseThreadInitThunk [0x00007FFAE6917344+20]\n\tRtlUserThreadStart [0x00007FFAE6A626B1+33]", "trace": "@pytest.fixture(scope=\"function\", name=\"Pragma\")\n    def fixture_actions() -> Generator:\n        \"Inicializar al actor y entregarle la habilidad de navegar por la web con Chrome\"\n>       actor = Actor.named(\"Pragma\").who_can(BrowseTheWeb.using_chrome())\n\nfeatures\\conftest.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\..\\.virtualenvs\\qa-web-screenpy-python-D3nIzd0V\\Lib\\site-packages\\screenpy_selenium\\abilities\\browse_the_web.py:38: in using_chrome\n    return cls.using(browser=Chrome())\n..\\..\\..\\.virtualenvs\\qa-web-screenpy-python-D3nIzd0V\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\n..\\..\\..\\.virtualenvs\\qa-web-screenpy-python-D3nIzd0V\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n..\\..\\..\\.virtualenvs\\qa-web-screenpy-python-D3nIzd0V\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:208: in __init__\n    self.start_session(capabilities)\n..\\..\\..\\.virtualenvs\\qa-web-screenpy-python-D3nIzd0V\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:292: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n..\\..\\..\\.virtualenvs\\qa-web-screenpy-python-D3nIzd0V\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023EE7FB7320>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...07FF6BEEC68D4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAE6917344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFAE6A626B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 122\nE       Current browser version is 124.0.6367.208 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6BEF5AD02+56930]\nE       \t(No symbol) [0x00007FF6BEECF602]\nE       \t(No symbol) [0x00007FF6BED842E5]\nE       \t(No symbol) [0x00007FF6BEDBA432]\nE       \t(No symbol) [0x00007FF6BEDB983F]\nE       \t(No symbol) [0x00007FF6BEDB341E]\nE       \t(No symbol) [0x00007FF6BEDB05D4]\nE       \t(No symbol) [0x00007FF6BEDF595F]\nE       \t(No symbol) [0x00007FF6BEDF54C0]\nE       \t(No symbol) [0x00007FF6BEDEBA43]\nE       \t(No symbol) [0x00007FF6BEDBD438]\nE       \t(No symbol) [0x00007FF6BEDBE4D1]\nE       \tGetHandleVerifier [0x00007FF6BF2D6F8D+3711213]\nE       \tGetHandleVerifier [0x00007FF6BF3304CD+4077101]\nE       \tGetHandleVerifier [0x00007FF6BF32865F+4044735]\nE       \tGetHandleVerifier [0x00007FF6BEFF9736+706710]\nE       \t(No symbol) [0x00007FF6BEEDB8DF]\nE       \t(No symbol) [0x00007FF6BEED6AC4]\nE       \t(No symbol) [0x00007FF6BEED6C1C]\nE       \t(No symbol) [0x00007FF6BEEC68D4]\nE       \tBaseThreadInitThunk [0x00007FFAE6917344+20]\nE       \tRtlUserThreadStart [0x00007FFAE6A626B1+33]\n\n..\\..\\..\\.virtualenvs\\qa-web-screenpy-python-D3nIzd0V\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException"}, "attachments": [{"name": "log", "source": "ff3c280a-d44a-4073-87dd-ba75a06ad476-attachment.txt", "type": "text/plain"}], "start": 1716567185520, "stop": 1716567185520, "uuid": "1e683bc2-fe51-46b8-bdf5-dfc23df8d8b7", "historyId": "ae2423f1de7135a5c9b650f81a98962e", "testCaseId": "ae2423f1de7135a5c9b650f81a98962e", "fullName": "features.test_find_case_studies#test_enter_case_studios_view", "labels": [{"name": "parentSuite", "value": "features"}, {"name": "suite", "value": "test_find_case_studies"}, {"name": "host", "value": "JORGE-ARDILA"}, {"name": "thread", "value": "30144-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "features.test_find_case_studies"}]}