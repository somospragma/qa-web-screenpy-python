{"name": "test_enter_case_studios_view", "status": "broken", "statusDetails": {"message": "screenpy.exceptions.DeliveryError: Encountered an issue while attempting to click Localizador menu: ElementNotInteractableException", "trace": "self = <screenpy_selenium.actions.click.Click object at 0x000001F629AB6240>, the_actor = Pragma\n\n    @beat(\"{} clicks on the {target}.\")\n    def perform_as(self: SelfClick, the_actor: Actor) -> None:\n        \"\"\"Direct the Actor to click on the element.\"\"\"\n        if self.target is None:\n            raise UnableToAct(\n                \"Target was not supplied for Click. Provide a Target by using the \"\n                \".on() or .on_the() method.\"\n            )\n    \n        element = self.target.found_by(the_actor)\n    \n        try:\n>           element.click()\n\n..\\..\\..\\.virtualenvs\\qa-web-screenpy-python-D3nIzd0V\\Lib\\site-packages\\screenpy_selenium\\actions\\click.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\..\\.virtualenvs\\qa-web-screenpy-python-D3nIzd0V\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\.virtualenvs\\qa-web-screenpy-python-D3nIzd0V\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\.virtualenvs\\qa-web-screenpy-python-D3nIzd0V\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F629BA7860>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF6112E2F6F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAE6917344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFAE6A626B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=125.0.6422.113)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF611371F22+60322]\nE       \t(No symbol) [0x00007FF6112ECE99]\nE       \t(No symbol) [0x00007FF6111A7CE9]\nE       \t(No symbol) [0x00007FF6111F89C2]\nE       \t(No symbol) [0x00007FF6111EB491]\nE       \t(No symbol) [0x00007FF61121C21A]\nE       \t(No symbol) [0x00007FF6111EADB6]\nE       \t(No symbol) [0x00007FF61121C430]\nE       \t(No symbol) [0x00007FF61123BC80]\nE       \t(No symbol) [0x00007FF61121BFC3]\nE       \t(No symbol) [0x00007FF6111E9617]\nE       \t(No symbol) [0x00007FF6111EA211]\nE       \tGetHandleVerifier [0x00007FF61168946D+3301613]\nE       \tGetHandleVerifier [0x00007FF6116D3693+3605267]\nE       \tGetHandleVerifier [0x00007FF6116C9410+3563664]\nE       \tGetHandleVerifier [0x00007FF6114242F6+790390]\nE       \t(No symbol) [0x00007FF6112F74DF]\nE       \t(No symbol) [0x00007FF6112F33D4]\nE       \t(No symbol) [0x00007FF6112F3562]\nE       \t(No symbol) [0x00007FF6112E2F6F]\nE       \tBaseThreadInitThunk [0x00007FFAE6917344+20]\nE       \tRtlUserThreadStart [0x00007FFAE6A626B1+33]\n\n..\\..\\..\\.virtualenvs\\qa-web-screenpy-python-D3nIzd0V\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException\n\nThe above exception was the direct cause of the following exception:\n\nPragma = Pragma\n\n    def test_enter_case_studios_view(Pragma: Actor) -> None:\n        given(Pragma).was_able_to(\n            Open.their_browser_on(URL)\n        )\n>       when(Pragma).attempts_to(\n            Click.on(menu_locator),\n            Wait.for_the(about_pragma_menu_locator).to_be_clickable(),\n            Click.on(about_pragma_menu_locator),\n            Wait.for_the(case_studies_locator).to_be_clickable(),\n            Click.on(case_studies_locator),\n            SaveScreenshot.as_(\"fin_prueba.png\").and_attach_it(\n            name=\"fin prueba\", attachment_type = AttachmentType.PNG\n        )\n        )\n\nfeatures\\test_find_case_studies.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\..\\.virtualenvs\\qa-web-screenpy-python-D3nIzd0V\\Lib\\site-packages\\screenpy\\actor.py:159: in attempts_to\n    self.perform(action)\n..\\..\\..\\.virtualenvs\\qa-web-screenpy-python-D3nIzd0V\\Lib\\site-packages\\screenpy\\actor.py:203: in perform\n    action.perform_as(self)\n..\\..\\..\\.virtualenvs\\qa-web-screenpy-python-D3nIzd0V\\Lib\\site-packages\\screenpy\\pacing.py:116: in wrapper\n    retval = n_func(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <screenpy_selenium.actions.click.Click object at 0x000001F629AB6240>, the_actor = Pragma\n\n    @beat(\"{} clicks on the {target}.\")\n    def perform_as(self: SelfClick, the_actor: Actor) -> None:\n        \"\"\"Direct the Actor to click on the element.\"\"\"\n        if self.target is None:\n            raise UnableToAct(\n                \"Target was not supplied for Click. Provide a Target by using the \"\n                \".on() or .on_the() method.\"\n            )\n    \n        element = self.target.found_by(the_actor)\n    \n        try:\n            element.click()\n        except WebDriverException as e:\n            msg = (\n                \"Encountered an issue while attempting to click \"\n                f\"{self.target}: {e.__class__.__name__}\"\n            )\n>           raise DeliveryError(msg) from e\nE           screenpy.exceptions.DeliveryError: Encountered an issue while attempting to click Localizador menu: ElementNotInteractableException\n\n..\\..\\..\\.virtualenvs\\qa-web-screenpy-python-D3nIzd0V\\Lib\\site-packages\\screenpy_selenium\\actions\\click.py:76: DeliveryError"}, "steps": [{"name": "Pragma visits https://www.pragma.co/es/", "status": "passed", "start": 1716567660664, "stop": 1716567662414}, {"name": "Pragma clicks on the Localizador menu.", "status": "broken", "statusDetails": {"message": "screenpy.exceptions.DeliveryError: Encountered an issue while attempting to click Localizador menu: ElementNotInteractableException\n", "trace": "  File \"C:\\Users\\jorge.ardila_pragma\\.virtualenvs\\qa-web-screenpy-python-D3nIzd0V\\Lib\\site-packages\\screenpy\\narration\\narrator.py\", line 192, in _entangle_func\n    yield enclosed_func\n  File \"C:\\Users\\jorge.ardila_pragma\\.virtualenvs\\qa-web-screenpy-python-D3nIzd0V\\Lib\\site-packages\\screenpy\\pacing.py\", line 116, in wrapper\n    retval = n_func(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\jorge.ardila_pragma\\.virtualenvs\\qa-web-screenpy-python-D3nIzd0V\\Lib\\site-packages\\screenpy_selenium\\actions\\click.py\", line 76, in perform_as\n    raise DeliveryError(msg) from e\n"}, "start": 1716567662414, "stop": 1716567662442}], "attachments": [{"name": "log", "source": "fe8f98fe-19ff-4c46-b4c5-a19963b36e7c-attachment.txt", "type": "text/plain"}], "start": 1716567660664, "stop": 1716567662447, "uuid": "d9ad8aa3-2075-4850-9bf3-b9718f3dd26f", "historyId": "ae2423f1de7135a5c9b650f81a98962e", "testCaseId": "ae2423f1de7135a5c9b650f81a98962e", "fullName": "features.test_find_case_studies#test_enter_case_studios_view", "labels": [{"name": "parentSuite", "value": "features"}, {"name": "suite", "value": "test_find_case_studies"}, {"name": "host", "value": "JORGE-ARDILA"}, {"name": "thread", "value": "25164-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "features.test_find_case_studies"}]}